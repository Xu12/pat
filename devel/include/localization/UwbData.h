// Generated by gencpp from file localization/UwbData.msg
// DO NOT EDIT!


#ifndef LOCALIZATION_MESSAGE_UWBDATA_H
#define LOCALIZATION_MESSAGE_UWBDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace localization
{
template <class ContainerAllocator>
struct UwbData_
{
  typedef UwbData_<ContainerAllocator> Type;

  UwbData_()
    : header()
    , source_id(0)
    , source_idx(0)
    , antenna(0)
    , uwb_time(0)
    , data_size(0)
    , data()  {
    }
  UwbData_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , source_id(0)
    , source_idx(0)
    , antenna(0)
    , uwb_time(0)
    , data_size(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _source_id_type;
  _source_id_type source_id;

   typedef uint8_t _source_idx_type;
  _source_idx_type source_idx;

   typedef int8_t _antenna_type;
  _antenna_type antenna;

   typedef uint32_t _uwb_time_type;
  _uwb_time_type uwb_time;

   typedef uint16_t _data_size_type;
  _data_size_type data_size;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::localization::UwbData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::localization::UwbData_<ContainerAllocator> const> ConstPtr;

}; // struct UwbData_

typedef ::localization::UwbData_<std::allocator<void> > UwbData;

typedef boost::shared_ptr< ::localization::UwbData > UwbDataPtr;
typedef boost::shared_ptr< ::localization::UwbData const> UwbDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::localization::UwbData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::localization::UwbData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace localization

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'localization': ['/home/xufang/pathcheck/src/localization/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::localization::UwbData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::localization::UwbData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::UwbData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::localization::UwbData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::UwbData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::localization::UwbData_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::localization::UwbData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "896b7e3783097862580617e2dfa7fe33";
  }

  static const char* value(const ::localization::UwbData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x896b7e3783097862ULL;
  static const uint64_t static_value2 = 0x580617e2dfa7fe33ULL;
};

template<class ContainerAllocator>
struct DataType< ::localization::UwbData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "localization/UwbData";
  }

  static const char* value(const ::localization::UwbData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::localization::UwbData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header					# ROS header\n\
uint8 source_id					# Identity number of the data sending P4xx\n\
uint8 source_idx				# Index number of the data sending node passed by rosparam\n\
int8 antenna					# Antenna where the measurement was carried out\n\
uint32 uwb_time 				# ms since radio boot at the time of the range conversation\n\
uint16 data_size				# number of data bytes received\n\
uint8[] data					# data array, data message will come seperately from the range\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::localization::UwbData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::localization::UwbData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.source_id);
      stream.next(m.source_idx);
      stream.next(m.antenna);
      stream.next(m.uwb_time);
      stream.next(m.data_size);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct UwbData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::localization::UwbData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::localization::UwbData_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "source_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.source_id);
    s << indent << "source_idx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.source_idx);
    s << indent << "antenna: ";
    Printer<int8_t>::stream(s, indent + "  ", v.antenna);
    s << indent << "uwb_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uwb_time);
    s << indent << "data_size: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.data_size);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOCALIZATION_MESSAGE_UWBDATA_H
