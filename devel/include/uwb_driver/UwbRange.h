// Generated by gencpp from file uwb_driver/UwbRange.msg
// DO NOT EDIT!


#ifndef UWB_DRIVER_MESSAGE_UWBRANGE_H
#define UWB_DRIVER_MESSAGE_UWBRANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace uwb_driver
{
template <class ContainerAllocator>
struct UwbRange_
{
  typedef UwbRange_<ContainerAllocator> Type;

  UwbRange_()
    : header()
    , responder_id(0)
    , responder_idx(0)
    , distance(0.0)
    , distance_err(0.0)
    , distance_dot(0.0)
    , distance_dot_err(0.0)
    , antenna(0)
    , stopwatch_time(0)
    , uwb_time(0)
    , responder_location()  {
    }
  UwbRange_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , responder_id(0)
    , responder_idx(0)
    , distance(0.0)
    , distance_err(0.0)
    , distance_dot(0.0)
    , distance_dot_err(0.0)
    , antenna(0)
    , stopwatch_time(0)
    , uwb_time(0)
    , responder_location(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _responder_id_type;
  _responder_id_type responder_id;

   typedef uint8_t _responder_idx_type;
  _responder_idx_type responder_idx;

   typedef float _distance_type;
  _distance_type distance;

   typedef float _distance_err_type;
  _distance_err_type distance_err;

   typedef float _distance_dot_type;
  _distance_dot_type distance_dot;

   typedef float _distance_dot_err_type;
  _distance_dot_err_type distance_dot_err;

   typedef int8_t _antenna_type;
  _antenna_type antenna;

   typedef uint16_t _stopwatch_time_type;
  _stopwatch_time_type stopwatch_time;

   typedef uint32_t _uwb_time_type;
  _uwb_time_type uwb_time;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _responder_location_type;
  _responder_location_type responder_location;




  typedef boost::shared_ptr< ::uwb_driver::UwbRange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uwb_driver::UwbRange_<ContainerAllocator> const> ConstPtr;

}; // struct UwbRange_

typedef ::uwb_driver::UwbRange_<std::allocator<void> > UwbRange;

typedef boost::shared_ptr< ::uwb_driver::UwbRange > UwbRangePtr;
typedef boost::shared_ptr< ::uwb_driver::UwbRange const> UwbRangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uwb_driver::UwbRange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uwb_driver::UwbRange_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uwb_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'uwb_driver': ['/home/xufang/pathcheck/src/uwb_driver/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uwb_driver::UwbRange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uwb_driver::UwbRange_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb_driver::UwbRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uwb_driver::UwbRange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb_driver::UwbRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uwb_driver::UwbRange_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uwb_driver::UwbRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "087a1d035ad0011be2ad2b94335b90d7";
  }

  static const char* value(const ::uwb_driver::UwbRange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x087a1d035ad0011bULL;
  static const uint64_t static_value2 = 0xe2ad2b94335b90d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::uwb_driver::UwbRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uwb_driver/UwbRange";
  }

  static const char* value(const ::uwb_driver::UwbRange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uwb_driver::UwbRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header					            # ROS header\n\
uint8 responder_id				            # Identity number of the responding P4xx\n\
uint8 responder_idx				            # Index number of the node in the responding array passed by rosparam\n\
float32 distance				            # Distance measurement\n\
float32 distance_err                                        # Error estimated by P4xx\n\
float32 distance_dot                                        # Range velocity estimated by Pxx\n\
float32 distance_dot_err                                    # Range velocity error estimated by Pxx\n\
int8 antenna					            # Antenna where the measurement was carried out\n\
uint16 stopwatch_time                                       # How long the range conversation took, in ms\n\
uint32 uwb_time					            # ms since radio boot at the time of the range conversation nb\n\
geometry_msgs/Point responder_location		# Location of the node if known\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::uwb_driver::UwbRange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uwb_driver::UwbRange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.responder_id);
      stream.next(m.responder_idx);
      stream.next(m.distance);
      stream.next(m.distance_err);
      stream.next(m.distance_dot);
      stream.next(m.distance_dot_err);
      stream.next(m.antenna);
      stream.next(m.stopwatch_time);
      stream.next(m.uwb_time);
      stream.next(m.responder_location);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct UwbRange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uwb_driver::UwbRange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uwb_driver::UwbRange_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "responder_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.responder_id);
    s << indent << "responder_idx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.responder_idx);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "distance_err: ";
    Printer<float>::stream(s, indent + "  ", v.distance_err);
    s << indent << "distance_dot: ";
    Printer<float>::stream(s, indent + "  ", v.distance_dot);
    s << indent << "distance_dot_err: ";
    Printer<float>::stream(s, indent + "  ", v.distance_dot_err);
    s << indent << "antenna: ";
    Printer<int8_t>::stream(s, indent + "  ", v.antenna);
    s << indent << "stopwatch_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.stopwatch_time);
    s << indent << "uwb_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uwb_time);
    s << indent << "responder_location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.responder_location);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UWB_DRIVER_MESSAGE_UWBRANGE_H
